/// Generated by the Protocol Buffers 3.1.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.22
/// Source file "uuid.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public extension Events{}

public extension Events {
    public struct UuidRoot {
        public static let `default` = UuidRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    //// Type representing a 128-bit UUID.
    /// The bytes of the UUID should be packed in little-endian **byte** (not bit) order. For example, the UUID `f47ac10b-58cc-4372-a567-0e02b2c3d479` should be encoded as `UUID{ low: 0x7243cc580bc17af4, high: 0x79d4c3b2020e67a5 }`
    final public class Uuid : GeneratedMessage {
        public typealias BuilderType = Events.Uuid.Builder

        public static func == (lhs: Events.Uuid, rhs: Events.Uuid) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasLow == rhs.hasLow) && (!lhs.hasLow || lhs.low == rhs.low)
            fieldCheck = fieldCheck && (lhs.hasHigh == rhs.hasHigh) && (!lhs.hasHigh || lhs.high == rhs.high)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var low:UInt64! = nil
        public fileprivate(set) var hasLow:Bool = false

        public fileprivate(set) var high:UInt64! = nil
        public fileprivate(set) var hasHigh:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasLow {
                return false
            }
            if !hasHigh {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasLow {
                try codedOutputStream.writeUInt64(fieldNumber: 1, value:low)
            }
            if hasHigh {
                try codedOutputStream.writeUInt64(fieldNumber: 2, value:high)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasLow {
                serialize_size += low.computeUInt64Size(fieldNumber: 1)
            }
            if hasHigh {
                serialize_size += high.computeUInt64Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Events.Uuid.Builder {
            return Events.Uuid.classBuilder() as! Events.Uuid.Builder
        }
        public func getBuilder() -> Events.Uuid.Builder {
            return classBuilder() as! Events.Uuid.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Events.Uuid.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Events.Uuid.Builder()
        }
        public func toBuilder() throws -> Events.Uuid.Builder {
            return try Events.Uuid.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Events.Uuid) throws -> Events.Uuid.Builder {
            return try Events.Uuid.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasLow {
                jsonMap["low"] = "\(low)"
            }
            if hasHigh {
                jsonMap["high"] = "\(high)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Events.Uuid {
            return try Events.Uuid.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Events.Uuid {
            return try Events.Uuid.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasLow {
                output += "\(indent) low: \(low) \n"
            }
            if hasHigh {
                output += "\(indent) high: \(high) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasLow {
                    hashCode = (hashCode &* 31) &+ low.hashValue
                }
                if hasHigh {
                    hashCode = (hashCode &* 31) &+ high.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Events.Uuid"
        }
        override public func className() -> String {
            return "Events.Uuid"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Events.Uuid = Events.Uuid()
            public func getMessage() -> Events.Uuid {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var low:UInt64 {
                get {
                    return builderResult.low
                }
                set (value) {
                    builderResult.hasLow = true
                    builderResult.low = value
                }
            }
            public var hasLow:Bool {
                get {
                    return builderResult.hasLow
                }
            }
            @discardableResult
            public func setLow(_ value:UInt64) -> Events.Uuid.Builder {
                self.low = value
                return self
            }
            @discardableResult
            public func clearLow() -> Events.Uuid.Builder{
                builderResult.hasLow = false
                builderResult.low = nil
                return self
            }
            public var high:UInt64 {
                get {
                    return builderResult.high
                }
                set (value) {
                    builderResult.hasHigh = true
                    builderResult.high = value
                }
            }
            public var hasHigh:Bool {
                get {
                    return builderResult.hasHigh
                }
            }
            @discardableResult
            public func setHigh(_ value:UInt64) -> Events.Uuid.Builder {
                self.high = value
                return self
            }
            @discardableResult
            public func clearHigh() -> Events.Uuid.Builder{
                builderResult.hasHigh = false
                builderResult.high = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Events.Uuid.Builder {
                builderResult = Events.Uuid()
                return self
            }
            override public func clone() throws -> Events.Uuid.Builder {
                return try Events.Uuid.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Events.Uuid {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Events.Uuid {
                let returnMe:Events.Uuid = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Events.Uuid) throws -> Events.Uuid.Builder {
                if other == Events.Uuid() {
                    return self
                }
                if other.hasLow {
                    low = other.low
                }
                if other.hasHigh {
                    high = other.high
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Events.Uuid.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.Uuid.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        low = try codedInputStream.readUInt64()

                    case 16:
                        high = try codedInputStream.readUInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Events.Uuid.Builder {
                let resultDecodedBuilder = Events.Uuid.Builder()
                if let jsonValueLow = jsonMap["low"] as? String {
                    resultDecodedBuilder.low = UInt64(jsonValueLow)!
                } else if let jsonValueLow = jsonMap["low"] as? UInt {
                    resultDecodedBuilder.low = UInt64(jsonValueLow)
                }
                if let jsonValueHigh = jsonMap["high"] as? String {
                    resultDecodedBuilder.high = UInt64(jsonValueHigh)!
                } else if let jsonValueHigh = jsonMap["high"] as? UInt {
                    resultDecodedBuilder.high = UInt64(jsonValueHigh)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Events.Uuid.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Events.Uuid.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Events.Uuid: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Events.Uuid> {
        var mergedArray = Array<Events.Uuid>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Events.Uuid? {
        return try Events.Uuid.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Events.Uuid {
        return try Events.Uuid.Builder().mergeFrom(data: data, extensionRegistry:Events.UuidRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Events.Uuid {
        return try Events.Uuid.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Events.Uuid {
        return try Events.Uuid.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Events.Uuid {
        return try Events.Uuid.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Events.Uuid {
        return try Events.Uuid.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.Uuid {
        return try Events.Uuid.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "low": return self.low
        case "high": return self.high
        default: return nil
        }
    }
}
extension Events.Uuid.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Events.Uuid
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "low": return self.low
            case "high": return self.high
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "low":
                guard let newSubscriptValue = newSubscriptValue as? UInt64 else {
                    return
                }
                self.low = newSubscriptValue
            case "high":
                guard let newSubscriptValue = newSubscriptValue as? UInt64 else {
                    return
                }
                self.high = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
