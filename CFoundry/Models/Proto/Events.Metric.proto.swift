/// Generated by the Protocol Buffers 3.1.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.22
/// Source file "metric.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public extension Events{}

public extension Events {
    public struct MetricRoot {
        public static let `default` = MetricRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Events.UuidRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    //// A ValueMetric indicates the value of a metric at an instant in time.
    final public class ValueMetric : GeneratedMessage {
        public typealias BuilderType = Events.ValueMetric.Builder

        public static func == (lhs: Events.ValueMetric, rhs: Events.ValueMetric) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
            fieldCheck = fieldCheck && (lhs.hasUnit == rhs.hasUnit) && (!lhs.hasUnit || lhs.unit == rhs.unit)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        //// Name of the metric. Must be consistent for downstream consumers to associate events semantically.
        public fileprivate(set) var name:String! = nil
        public fileprivate(set) var hasName:Bool = false

        //// Value at the time of event emission.
        public fileprivate(set) var value:Double! = nil
        public fileprivate(set) var hasValue:Bool = false

        //// Unit of the metric. Please see http://metrics20.org/spec/#units for ideas; SI units/prefixes are recommended where applicable. Should be consistent for the life of the metric (consumers are expected to report, but not interpret, prefixes).
        public fileprivate(set) var unit:String! = nil
        public fileprivate(set) var hasUnit:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasName {
                return false
            }
            if !hasValue {
                return false
            }
            if !hasUnit {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 1, value:name)
            }
            if hasValue {
                try codedOutputStream.writeDouble(fieldNumber: 2, value:value)
            }
            if hasUnit {
                try codedOutputStream.writeString(fieldNumber: 3, value:unit)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 1)
            }
            if hasValue {
                serialize_size += value.computeDoubleSize(fieldNumber: 2)
            }
            if hasUnit {
                serialize_size += unit.computeStringSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Events.ValueMetric.Builder {
            return Events.ValueMetric.classBuilder() as! Events.ValueMetric.Builder
        }
        public func getBuilder() -> Events.ValueMetric.Builder {
            return classBuilder() as! Events.ValueMetric.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Events.ValueMetric.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Events.ValueMetric.Builder()
        }
        public func toBuilder() throws -> Events.ValueMetric.Builder {
            return try Events.ValueMetric.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Events.ValueMetric) throws -> Events.ValueMetric.Builder {
            return try Events.ValueMetric.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasName {
                jsonMap["name"] = name
            }
            if hasValue {
                jsonMap["value"] = Double(value)
            }
            if hasUnit {
                jsonMap["unit"] = unit
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Events.ValueMetric {
            return try Events.ValueMetric.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Events.ValueMetric {
            return try Events.ValueMetric.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            if hasValue {
                output += "\(indent) value: \(value) \n"
            }
            if hasUnit {
                output += "\(indent) unit: \(unit) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasValue {
                    hashCode = (hashCode &* 31) &+ value.hashValue
                }
                if hasUnit {
                    hashCode = (hashCode &* 31) &+ unit.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Events.ValueMetric"
        }
        override public func className() -> String {
            return "Events.ValueMetric"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Events.ValueMetric = Events.ValueMetric()
            public func getMessage() -> Events.ValueMetric {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            //// Name of the metric. Must be consistent for downstream consumers to associate events semantically.
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Events.ValueMetric.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Events.ValueMetric.Builder{
                builderResult.hasName = false
                builderResult.name = nil
                return self
            }
            //// Value at the time of event emission.
            public var value:Double {
                get {
                    return builderResult.value
                }
                set (value) {
                    builderResult.hasValue = true
                    builderResult.value = value
                }
            }
            public var hasValue:Bool {
                get {
                    return builderResult.hasValue
                }
            }
            @discardableResult
            public func setValue(_ value:Double) -> Events.ValueMetric.Builder {
                self.value = value
                return self
            }
            @discardableResult
            public func clearValue() -> Events.ValueMetric.Builder{
                builderResult.hasValue = false
                builderResult.value = nil
                return self
            }
            //// Unit of the metric. Please see http://metrics20.org/spec/#units for ideas; SI units/prefixes are recommended where applicable. Should be consistent for the life of the metric (consumers are expected to report, but not interpret, prefixes).
            public var unit:String {
                get {
                    return builderResult.unit
                }
                set (value) {
                    builderResult.hasUnit = true
                    builderResult.unit = value
                }
            }
            public var hasUnit:Bool {
                get {
                    return builderResult.hasUnit
                }
            }
            @discardableResult
            public func setUnit(_ value:String) -> Events.ValueMetric.Builder {
                self.unit = value
                return self
            }
            @discardableResult
            public func clearUnit() -> Events.ValueMetric.Builder{
                builderResult.hasUnit = false
                builderResult.unit = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Events.ValueMetric.Builder {
                builderResult = Events.ValueMetric()
                return self
            }
            override public func clone() throws -> Events.ValueMetric.Builder {
                return try Events.ValueMetric.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Events.ValueMetric {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Events.ValueMetric {
                let returnMe:Events.ValueMetric = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Events.ValueMetric) throws -> Events.ValueMetric.Builder {
                if other == Events.ValueMetric() {
                    return self
                }
                if other.hasName {
                    name = other.name
                }
                if other.hasValue {
                    value = other.value
                }
                if other.hasUnit {
                    unit = other.unit
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Events.ValueMetric.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.ValueMetric.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        name = try codedInputStream.readString()

                    case 17:
                        value = try codedInputStream.readDouble()

                    case 26:
                        unit = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Events.ValueMetric.Builder {
                let resultDecodedBuilder = Events.ValueMetric.Builder()
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                if let jsonValueValue = jsonMap["value"] as? Double {
                    resultDecodedBuilder.value = Double(jsonValueValue)
                } else if let jsonValueValue = jsonMap["value"] as? String {
                    resultDecodedBuilder.value = Double(jsonValueValue)!
                }
                if let jsonValueUnit = jsonMap["unit"] as? String {
                    resultDecodedBuilder.unit = jsonValueUnit
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Events.ValueMetric.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Events.ValueMetric.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //// A CounterEvent represents the increment of a counter. It contains only the change in the value; it is the responsibility of downstream consumers to maintain the value of the counter.
    final public class CounterEvent : GeneratedMessage {
        public typealias BuilderType = Events.CounterEvent.Builder

        public static func == (lhs: Events.CounterEvent, rhs: Events.CounterEvent) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = fieldCheck && (lhs.hasDelta == rhs.hasDelta) && (!lhs.hasDelta || lhs.delta == rhs.delta)
            fieldCheck = fieldCheck && (lhs.hasTotal == rhs.hasTotal) && (!lhs.hasTotal || lhs.total == rhs.total)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        //// Name of the counter. Must be consistent for downstream consumers to associate events semantically.
        public fileprivate(set) var name:String! = nil
        public fileprivate(set) var hasName:Bool = false

        //// Amount by which to increment the counter.
        public fileprivate(set) var delta:UInt64! = nil
        public fileprivate(set) var hasDelta:Bool = false

        //// Total value of the counter. This will be overridden by Metron, which internally tracks the total of each named Counter it receives.
        public fileprivate(set) var total:UInt64! = nil
        public fileprivate(set) var hasTotal:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasName {
                return false
            }
            if !hasDelta {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 1, value:name)
            }
            if hasDelta {
                try codedOutputStream.writeUInt64(fieldNumber: 2, value:delta)
            }
            if hasTotal {
                try codedOutputStream.writeUInt64(fieldNumber: 3, value:total)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 1)
            }
            if hasDelta {
                serialize_size += delta.computeUInt64Size(fieldNumber: 2)
            }
            if hasTotal {
                serialize_size += total.computeUInt64Size(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Events.CounterEvent.Builder {
            return Events.CounterEvent.classBuilder() as! Events.CounterEvent.Builder
        }
        public func getBuilder() -> Events.CounterEvent.Builder {
            return classBuilder() as! Events.CounterEvent.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Events.CounterEvent.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Events.CounterEvent.Builder()
        }
        public func toBuilder() throws -> Events.CounterEvent.Builder {
            return try Events.CounterEvent.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Events.CounterEvent) throws -> Events.CounterEvent.Builder {
            return try Events.CounterEvent.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasName {
                jsonMap["name"] = name
            }
            if hasDelta {
                jsonMap["delta"] = "\(delta)"
            }
            if hasTotal {
                jsonMap["total"] = "\(total)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Events.CounterEvent {
            return try Events.CounterEvent.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Events.CounterEvent {
            return try Events.CounterEvent.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            if hasDelta {
                output += "\(indent) delta: \(delta) \n"
            }
            if hasTotal {
                output += "\(indent) total: \(total) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasDelta {
                    hashCode = (hashCode &* 31) &+ delta.hashValue
                }
                if hasTotal {
                    hashCode = (hashCode &* 31) &+ total.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Events.CounterEvent"
        }
        override public func className() -> String {
            return "Events.CounterEvent"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Events.CounterEvent = Events.CounterEvent()
            public func getMessage() -> Events.CounterEvent {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            //// Name of the counter. Must be consistent for downstream consumers to associate events semantically.
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Events.CounterEvent.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Events.CounterEvent.Builder{
                builderResult.hasName = false
                builderResult.name = nil
                return self
            }
            //// Amount by which to increment the counter.
            public var delta:UInt64 {
                get {
                    return builderResult.delta
                }
                set (value) {
                    builderResult.hasDelta = true
                    builderResult.delta = value
                }
            }
            public var hasDelta:Bool {
                get {
                    return builderResult.hasDelta
                }
            }
            @discardableResult
            public func setDelta(_ value:UInt64) -> Events.CounterEvent.Builder {
                self.delta = value
                return self
            }
            @discardableResult
            public func clearDelta() -> Events.CounterEvent.Builder{
                builderResult.hasDelta = false
                builderResult.delta = nil
                return self
            }
            //// Total value of the counter. This will be overridden by Metron, which internally tracks the total of each named Counter it receives.
            public var total:UInt64 {
                get {
                    return builderResult.total
                }
                set (value) {
                    builderResult.hasTotal = true
                    builderResult.total = value
                }
            }
            public var hasTotal:Bool {
                get {
                    return builderResult.hasTotal
                }
            }
            @discardableResult
            public func setTotal(_ value:UInt64) -> Events.CounterEvent.Builder {
                self.total = value
                return self
            }
            @discardableResult
            public func clearTotal() -> Events.CounterEvent.Builder{
                builderResult.hasTotal = false
                builderResult.total = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Events.CounterEvent.Builder {
                builderResult = Events.CounterEvent()
                return self
            }
            override public func clone() throws -> Events.CounterEvent.Builder {
                return try Events.CounterEvent.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Events.CounterEvent {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Events.CounterEvent {
                let returnMe:Events.CounterEvent = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Events.CounterEvent) throws -> Events.CounterEvent.Builder {
                if other == Events.CounterEvent() {
                    return self
                }
                if other.hasName {
                    name = other.name
                }
                if other.hasDelta {
                    delta = other.delta
                }
                if other.hasTotal {
                    total = other.total
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Events.CounterEvent.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.CounterEvent.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        name = try codedInputStream.readString()

                    case 16:
                        delta = try codedInputStream.readUInt64()

                    case 24:
                        total = try codedInputStream.readUInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Events.CounterEvent.Builder {
                let resultDecodedBuilder = Events.CounterEvent.Builder()
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                if let jsonValueDelta = jsonMap["delta"] as? String {
                    resultDecodedBuilder.delta = UInt64(jsonValueDelta)!
                } else if let jsonValueDelta = jsonMap["delta"] as? UInt {
                    resultDecodedBuilder.delta = UInt64(jsonValueDelta)
                }
                if let jsonValueTotal = jsonMap["total"] as? String {
                    resultDecodedBuilder.total = UInt64(jsonValueTotal)!
                } else if let jsonValueTotal = jsonMap["total"] as? UInt {
                    resultDecodedBuilder.total = UInt64(jsonValueTotal)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Events.CounterEvent.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Events.CounterEvent.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //// A ContainerMetric records resource usage of an app in a container.
    final public class ContainerMetric : GeneratedMessage {
        public typealias BuilderType = Events.ContainerMetric.Builder

        public static func == (lhs: Events.ContainerMetric, rhs: Events.ContainerMetric) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasApplicationId == rhs.hasApplicationId) && (!lhs.hasApplicationId || lhs.applicationId == rhs.applicationId)
            fieldCheck = fieldCheck && (lhs.hasInstanceIndex == rhs.hasInstanceIndex) && (!lhs.hasInstanceIndex || lhs.instanceIndex == rhs.instanceIndex)
            fieldCheck = fieldCheck && (lhs.hasCpuPercentage == rhs.hasCpuPercentage) && (!lhs.hasCpuPercentage || lhs.cpuPercentage == rhs.cpuPercentage)
            fieldCheck = fieldCheck && (lhs.hasMemoryBytes == rhs.hasMemoryBytes) && (!lhs.hasMemoryBytes || lhs.memoryBytes == rhs.memoryBytes)
            fieldCheck = fieldCheck && (lhs.hasDiskBytes == rhs.hasDiskBytes) && (!lhs.hasDiskBytes || lhs.diskBytes == rhs.diskBytes)
            fieldCheck = fieldCheck && (lhs.hasMemoryBytesQuota == rhs.hasMemoryBytesQuota) && (!lhs.hasMemoryBytesQuota || lhs.memoryBytesQuota == rhs.memoryBytesQuota)
            fieldCheck = fieldCheck && (lhs.hasDiskBytesQuota == rhs.hasDiskBytesQuota) && (!lhs.hasDiskBytesQuota || lhs.diskBytesQuota == rhs.diskBytesQuota)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        //// ID of the contained application.
        public fileprivate(set) var applicationId:String! = nil
        public fileprivate(set) var hasApplicationId:Bool = false

        //// Instance index of the contained application. (This, with applicationId, should uniquely identify a container.)
        public fileprivate(set) var instanceIndex:Int32! = nil
        public fileprivate(set) var hasInstanceIndex:Bool = false

        //// CPU used, on a scale of 0 to 100.
        public fileprivate(set) var cpuPercentage:Double! = nil
        public fileprivate(set) var hasCpuPercentage:Bool = false

        //// Bytes of memory used.
        public fileprivate(set) var memoryBytes:UInt64! = nil
        public fileprivate(set) var hasMemoryBytes:Bool = false

        //// Bytes of disk used.
        public fileprivate(set) var diskBytes:UInt64! = nil
        public fileprivate(set) var hasDiskBytes:Bool = false

        //// Maximum bytes of memory allocated to container.
        public fileprivate(set) var memoryBytesQuota:UInt64! = nil
        public fileprivate(set) var hasMemoryBytesQuota:Bool = false

        //// Maximum bytes of disk allocated to container.
        public fileprivate(set) var diskBytesQuota:UInt64! = nil
        public fileprivate(set) var hasDiskBytesQuota:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasApplicationId {
                return false
            }
            if !hasInstanceIndex {
                return false
            }
            if !hasCpuPercentage {
                return false
            }
            if !hasMemoryBytes {
                return false
            }
            if !hasDiskBytes {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasApplicationId {
                try codedOutputStream.writeString(fieldNumber: 1, value:applicationId)
            }
            if hasInstanceIndex {
                try codedOutputStream.writeInt32(fieldNumber: 2, value:instanceIndex)
            }
            if hasCpuPercentage {
                try codedOutputStream.writeDouble(fieldNumber: 3, value:cpuPercentage)
            }
            if hasMemoryBytes {
                try codedOutputStream.writeUInt64(fieldNumber: 4, value:memoryBytes)
            }
            if hasDiskBytes {
                try codedOutputStream.writeUInt64(fieldNumber: 5, value:diskBytes)
            }
            if hasMemoryBytesQuota {
                try codedOutputStream.writeUInt64(fieldNumber: 6, value:memoryBytesQuota)
            }
            if hasDiskBytesQuota {
                try codedOutputStream.writeUInt64(fieldNumber: 7, value:diskBytesQuota)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasApplicationId {
                serialize_size += applicationId.computeStringSize(fieldNumber: 1)
            }
            if hasInstanceIndex {
                serialize_size += instanceIndex.computeInt32Size(fieldNumber: 2)
            }
            if hasCpuPercentage {
                serialize_size += cpuPercentage.computeDoubleSize(fieldNumber: 3)
            }
            if hasMemoryBytes {
                serialize_size += memoryBytes.computeUInt64Size(fieldNumber: 4)
            }
            if hasDiskBytes {
                serialize_size += diskBytes.computeUInt64Size(fieldNumber: 5)
            }
            if hasMemoryBytesQuota {
                serialize_size += memoryBytesQuota.computeUInt64Size(fieldNumber: 6)
            }
            if hasDiskBytesQuota {
                serialize_size += diskBytesQuota.computeUInt64Size(fieldNumber: 7)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Events.ContainerMetric.Builder {
            return Events.ContainerMetric.classBuilder() as! Events.ContainerMetric.Builder
        }
        public func getBuilder() -> Events.ContainerMetric.Builder {
            return classBuilder() as! Events.ContainerMetric.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Events.ContainerMetric.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Events.ContainerMetric.Builder()
        }
        public func toBuilder() throws -> Events.ContainerMetric.Builder {
            return try Events.ContainerMetric.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Events.ContainerMetric) throws -> Events.ContainerMetric.Builder {
            return try Events.ContainerMetric.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasApplicationId {
                jsonMap["applicationId"] = applicationId
            }
            if hasInstanceIndex {
                jsonMap["instanceIndex"] = Int(instanceIndex)
            }
            if hasCpuPercentage {
                jsonMap["cpuPercentage"] = Double(cpuPercentage)
            }
            if hasMemoryBytes {
                jsonMap["memoryBytes"] = "\(memoryBytes)"
            }
            if hasDiskBytes {
                jsonMap["diskBytes"] = "\(diskBytes)"
            }
            if hasMemoryBytesQuota {
                jsonMap["memoryBytesQuota"] = "\(memoryBytesQuota)"
            }
            if hasDiskBytesQuota {
                jsonMap["diskBytesQuota"] = "\(diskBytesQuota)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Events.ContainerMetric {
            return try Events.ContainerMetric.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Events.ContainerMetric {
            return try Events.ContainerMetric.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasApplicationId {
                output += "\(indent) applicationId: \(applicationId) \n"
            }
            if hasInstanceIndex {
                output += "\(indent) instanceIndex: \(instanceIndex) \n"
            }
            if hasCpuPercentage {
                output += "\(indent) cpuPercentage: \(cpuPercentage) \n"
            }
            if hasMemoryBytes {
                output += "\(indent) memoryBytes: \(memoryBytes) \n"
            }
            if hasDiskBytes {
                output += "\(indent) diskBytes: \(diskBytes) \n"
            }
            if hasMemoryBytesQuota {
                output += "\(indent) memoryBytesQuota: \(memoryBytesQuota) \n"
            }
            if hasDiskBytesQuota {
                output += "\(indent) diskBytesQuota: \(diskBytesQuota) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasApplicationId {
                    hashCode = (hashCode &* 31) &+ applicationId.hashValue
                }
                if hasInstanceIndex {
                    hashCode = (hashCode &* 31) &+ instanceIndex.hashValue
                }
                if hasCpuPercentage {
                    hashCode = (hashCode &* 31) &+ cpuPercentage.hashValue
                }
                if hasMemoryBytes {
                    hashCode = (hashCode &* 31) &+ memoryBytes.hashValue
                }
                if hasDiskBytes {
                    hashCode = (hashCode &* 31) &+ diskBytes.hashValue
                }
                if hasMemoryBytesQuota {
                    hashCode = (hashCode &* 31) &+ memoryBytesQuota.hashValue
                }
                if hasDiskBytesQuota {
                    hashCode = (hashCode &* 31) &+ diskBytesQuota.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Events.ContainerMetric"
        }
        override public func className() -> String {
            return "Events.ContainerMetric"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Events.ContainerMetric = Events.ContainerMetric()
            public func getMessage() -> Events.ContainerMetric {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            //// ID of the contained application.
            public var applicationId:String {
                get {
                    return builderResult.applicationId
                }
                set (value) {
                    builderResult.hasApplicationId = true
                    builderResult.applicationId = value
                }
            }
            public var hasApplicationId:Bool {
                get {
                    return builderResult.hasApplicationId
                }
            }
            @discardableResult
            public func setApplicationId(_ value:String) -> Events.ContainerMetric.Builder {
                self.applicationId = value
                return self
            }
            @discardableResult
            public func clearApplicationId() -> Events.ContainerMetric.Builder{
                builderResult.hasApplicationId = false
                builderResult.applicationId = nil
                return self
            }
            //// Instance index of the contained application. (This, with applicationId, should uniquely identify a container.)
            public var instanceIndex:Int32 {
                get {
                    return builderResult.instanceIndex
                }
                set (value) {
                    builderResult.hasInstanceIndex = true
                    builderResult.instanceIndex = value
                }
            }
            public var hasInstanceIndex:Bool {
                get {
                    return builderResult.hasInstanceIndex
                }
            }
            @discardableResult
            public func setInstanceIndex(_ value:Int32) -> Events.ContainerMetric.Builder {
                self.instanceIndex = value
                return self
            }
            @discardableResult
            public func clearInstanceIndex() -> Events.ContainerMetric.Builder{
                builderResult.hasInstanceIndex = false
                builderResult.instanceIndex = nil
                return self
            }
            //// CPU used, on a scale of 0 to 100.
            public var cpuPercentage:Double {
                get {
                    return builderResult.cpuPercentage
                }
                set (value) {
                    builderResult.hasCpuPercentage = true
                    builderResult.cpuPercentage = value
                }
            }
            public var hasCpuPercentage:Bool {
                get {
                    return builderResult.hasCpuPercentage
                }
            }
            @discardableResult
            public func setCpuPercentage(_ value:Double) -> Events.ContainerMetric.Builder {
                self.cpuPercentage = value
                return self
            }
            @discardableResult
            public func clearCpuPercentage() -> Events.ContainerMetric.Builder{
                builderResult.hasCpuPercentage = false
                builderResult.cpuPercentage = nil
                return self
            }
            //// Bytes of memory used.
            public var memoryBytes:UInt64 {
                get {
                    return builderResult.memoryBytes
                }
                set (value) {
                    builderResult.hasMemoryBytes = true
                    builderResult.memoryBytes = value
                }
            }
            public var hasMemoryBytes:Bool {
                get {
                    return builderResult.hasMemoryBytes
                }
            }
            @discardableResult
            public func setMemoryBytes(_ value:UInt64) -> Events.ContainerMetric.Builder {
                self.memoryBytes = value
                return self
            }
            @discardableResult
            public func clearMemoryBytes() -> Events.ContainerMetric.Builder{
                builderResult.hasMemoryBytes = false
                builderResult.memoryBytes = nil
                return self
            }
            //// Bytes of disk used.
            public var diskBytes:UInt64 {
                get {
                    return builderResult.diskBytes
                }
                set (value) {
                    builderResult.hasDiskBytes = true
                    builderResult.diskBytes = value
                }
            }
            public var hasDiskBytes:Bool {
                get {
                    return builderResult.hasDiskBytes
                }
            }
            @discardableResult
            public func setDiskBytes(_ value:UInt64) -> Events.ContainerMetric.Builder {
                self.diskBytes = value
                return self
            }
            @discardableResult
            public func clearDiskBytes() -> Events.ContainerMetric.Builder{
                builderResult.hasDiskBytes = false
                builderResult.diskBytes = nil
                return self
            }
            //// Maximum bytes of memory allocated to container.
            public var memoryBytesQuota:UInt64 {
                get {
                    return builderResult.memoryBytesQuota
                }
                set (value) {
                    builderResult.hasMemoryBytesQuota = true
                    builderResult.memoryBytesQuota = value
                }
            }
            public var hasMemoryBytesQuota:Bool {
                get {
                    return builderResult.hasMemoryBytesQuota
                }
            }
            @discardableResult
            public func setMemoryBytesQuota(_ value:UInt64) -> Events.ContainerMetric.Builder {
                self.memoryBytesQuota = value
                return self
            }
            @discardableResult
            public func clearMemoryBytesQuota() -> Events.ContainerMetric.Builder{
                builderResult.hasMemoryBytesQuota = false
                builderResult.memoryBytesQuota = nil
                return self
            }
            //// Maximum bytes of disk allocated to container.
            public var diskBytesQuota:UInt64 {
                get {
                    return builderResult.diskBytesQuota
                }
                set (value) {
                    builderResult.hasDiskBytesQuota = true
                    builderResult.diskBytesQuota = value
                }
            }
            public var hasDiskBytesQuota:Bool {
                get {
                    return builderResult.hasDiskBytesQuota
                }
            }
            @discardableResult
            public func setDiskBytesQuota(_ value:UInt64) -> Events.ContainerMetric.Builder {
                self.diskBytesQuota = value
                return self
            }
            @discardableResult
            public func clearDiskBytesQuota() -> Events.ContainerMetric.Builder{
                builderResult.hasDiskBytesQuota = false
                builderResult.diskBytesQuota = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Events.ContainerMetric.Builder {
                builderResult = Events.ContainerMetric()
                return self
            }
            override public func clone() throws -> Events.ContainerMetric.Builder {
                return try Events.ContainerMetric.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Events.ContainerMetric {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Events.ContainerMetric {
                let returnMe:Events.ContainerMetric = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Events.ContainerMetric) throws -> Events.ContainerMetric.Builder {
                if other == Events.ContainerMetric() {
                    return self
                }
                if other.hasApplicationId {
                    applicationId = other.applicationId
                }
                if other.hasInstanceIndex {
                    instanceIndex = other.instanceIndex
                }
                if other.hasCpuPercentage {
                    cpuPercentage = other.cpuPercentage
                }
                if other.hasMemoryBytes {
                    memoryBytes = other.memoryBytes
                }
                if other.hasDiskBytes {
                    diskBytes = other.diskBytes
                }
                if other.hasMemoryBytesQuota {
                    memoryBytesQuota = other.memoryBytesQuota
                }
                if other.hasDiskBytesQuota {
                    diskBytesQuota = other.diskBytesQuota
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Events.ContainerMetric.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.ContainerMetric.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        applicationId = try codedInputStream.readString()

                    case 16:
                        instanceIndex = try codedInputStream.readInt32()

                    case 25:
                        cpuPercentage = try codedInputStream.readDouble()

                    case 32:
                        memoryBytes = try codedInputStream.readUInt64()

                    case 40:
                        diskBytes = try codedInputStream.readUInt64()

                    case 48:
                        memoryBytesQuota = try codedInputStream.readUInt64()

                    case 56:
                        diskBytesQuota = try codedInputStream.readUInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Events.ContainerMetric.Builder {
                let resultDecodedBuilder = Events.ContainerMetric.Builder()
                if let jsonValueApplicationId = jsonMap["applicationId"] as? String {
                    resultDecodedBuilder.applicationId = jsonValueApplicationId
                }
                if let jsonValueInstanceIndex = jsonMap["instanceIndex"] as? Int {
                    resultDecodedBuilder.instanceIndex = Int32(jsonValueInstanceIndex)
                } else if let jsonValueInstanceIndex = jsonMap["instanceIndex"] as? String {
                    resultDecodedBuilder.instanceIndex = Int32(jsonValueInstanceIndex)!
                }
                if let jsonValueCpuPercentage = jsonMap["cpuPercentage"] as? Double {
                    resultDecodedBuilder.cpuPercentage = Double(jsonValueCpuPercentage)
                } else if let jsonValueCpuPercentage = jsonMap["cpuPercentage"] as? String {
                    resultDecodedBuilder.cpuPercentage = Double(jsonValueCpuPercentage)!
                }
                if let jsonValueMemoryBytes = jsonMap["memoryBytes"] as? String {
                    resultDecodedBuilder.memoryBytes = UInt64(jsonValueMemoryBytes)!
                } else if let jsonValueMemoryBytes = jsonMap["memoryBytes"] as? UInt {
                    resultDecodedBuilder.memoryBytes = UInt64(jsonValueMemoryBytes)
                }
                if let jsonValueDiskBytes = jsonMap["diskBytes"] as? String {
                    resultDecodedBuilder.diskBytes = UInt64(jsonValueDiskBytes)!
                } else if let jsonValueDiskBytes = jsonMap["diskBytes"] as? UInt {
                    resultDecodedBuilder.diskBytes = UInt64(jsonValueDiskBytes)
                }
                if let jsonValueMemoryBytesQuota = jsonMap["memoryBytesQuota"] as? String {
                    resultDecodedBuilder.memoryBytesQuota = UInt64(jsonValueMemoryBytesQuota)!
                } else if let jsonValueMemoryBytesQuota = jsonMap["memoryBytesQuota"] as? UInt {
                    resultDecodedBuilder.memoryBytesQuota = UInt64(jsonValueMemoryBytesQuota)
                }
                if let jsonValueDiskBytesQuota = jsonMap["diskBytesQuota"] as? String {
                    resultDecodedBuilder.diskBytesQuota = UInt64(jsonValueDiskBytesQuota)!
                } else if let jsonValueDiskBytesQuota = jsonMap["diskBytesQuota"] as? UInt {
                    resultDecodedBuilder.diskBytesQuota = UInt64(jsonValueDiskBytesQuota)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Events.ContainerMetric.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Events.ContainerMetric.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Events.ValueMetric: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Events.ValueMetric> {
        var mergedArray = Array<Events.ValueMetric>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Events.ValueMetric? {
        return try Events.ValueMetric.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Events.ValueMetric {
        return try Events.ValueMetric.Builder().mergeFrom(data: data, extensionRegistry:Events.MetricRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Events.ValueMetric {
        return try Events.ValueMetric.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Events.ValueMetric {
        return try Events.ValueMetric.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Events.ValueMetric {
        return try Events.ValueMetric.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Events.ValueMetric {
        return try Events.ValueMetric.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.ValueMetric {
        return try Events.ValueMetric.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "name": return self.name
        case "value": return self.value
        case "unit": return self.unit
        default: return nil
        }
    }
}
extension Events.ValueMetric.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Events.ValueMetric
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "name": return self.name
            case "value": return self.value
            case "unit": return self.unit
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "value":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.value = newSubscriptValue
            case "unit":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.unit = newSubscriptValue
            default: return
            }
        }
    }
}
extension Events.CounterEvent: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Events.CounterEvent> {
        var mergedArray = Array<Events.CounterEvent>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Events.CounterEvent? {
        return try Events.CounterEvent.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Events.CounterEvent {
        return try Events.CounterEvent.Builder().mergeFrom(data: data, extensionRegistry:Events.MetricRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Events.CounterEvent {
        return try Events.CounterEvent.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Events.CounterEvent {
        return try Events.CounterEvent.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Events.CounterEvent {
        return try Events.CounterEvent.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Events.CounterEvent {
        return try Events.CounterEvent.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.CounterEvent {
        return try Events.CounterEvent.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "name": return self.name
        case "delta": return self.delta
        case "total": return self.total
        default: return nil
        }
    }
}
extension Events.CounterEvent.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Events.CounterEvent
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "name": return self.name
            case "delta": return self.delta
            case "total": return self.total
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "delta":
                guard let newSubscriptValue = newSubscriptValue as? UInt64 else {
                    return
                }
                self.delta = newSubscriptValue
            case "total":
                guard let newSubscriptValue = newSubscriptValue as? UInt64 else {
                    return
                }
                self.total = newSubscriptValue
            default: return
            }
        }
    }
}
extension Events.ContainerMetric: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Events.ContainerMetric> {
        var mergedArray = Array<Events.ContainerMetric>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Events.ContainerMetric? {
        return try Events.ContainerMetric.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Events.ContainerMetric {
        return try Events.ContainerMetric.Builder().mergeFrom(data: data, extensionRegistry:Events.MetricRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Events.ContainerMetric {
        return try Events.ContainerMetric.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Events.ContainerMetric {
        return try Events.ContainerMetric.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Events.ContainerMetric {
        return try Events.ContainerMetric.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Events.ContainerMetric {
        return try Events.ContainerMetric.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.ContainerMetric {
        return try Events.ContainerMetric.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "applicationId": return self.applicationId
        case "instanceIndex": return self.instanceIndex
        case "cpuPercentage": return self.cpuPercentage
        case "memoryBytes": return self.memoryBytes
        case "diskBytes": return self.diskBytes
        case "memoryBytesQuota": return self.memoryBytesQuota
        case "diskBytesQuota": return self.diskBytesQuota
        default: return nil
        }
    }
}
extension Events.ContainerMetric.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Events.ContainerMetric
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "applicationId": return self.applicationId
            case "instanceIndex": return self.instanceIndex
            case "cpuPercentage": return self.cpuPercentage
            case "memoryBytes": return self.memoryBytes
            case "diskBytes": return self.diskBytes
            case "memoryBytesQuota": return self.memoryBytesQuota
            case "diskBytesQuota": return self.diskBytesQuota
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "applicationId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.applicationId = newSubscriptValue
            case "instanceIndex":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.instanceIndex = newSubscriptValue
            case "cpuPercentage":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.cpuPercentage = newSubscriptValue
            case "memoryBytes":
                guard let newSubscriptValue = newSubscriptValue as? UInt64 else {
                    return
                }
                self.memoryBytes = newSubscriptValue
            case "diskBytes":
                guard let newSubscriptValue = newSubscriptValue as? UInt64 else {
                    return
                }
                self.diskBytes = newSubscriptValue
            case "memoryBytesQuota":
                guard let newSubscriptValue = newSubscriptValue as? UInt64 else {
                    return
                }
                self.memoryBytesQuota = newSubscriptValue
            case "diskBytesQuota":
                guard let newSubscriptValue = newSubscriptValue as? UInt64 else {
                    return
                }
                self.diskBytesQuota = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
